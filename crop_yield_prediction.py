# -*- coding: utf-8 -*-
"""crop yield prediction notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/filzarahma/crop-yield-prediction/blob/main/crop%20yield%20prediction%20notebook.ipynb

# Import Library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline

from sklearn.preprocessing import StandardScaler

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import Lasso, Ridge
from xgboost import XGBRegressor
from sklearn.ensemble import AdaBoostRegressor

from sklearn.metrics import mean_squared_error, r2_score

"""# Dataset Loading"""

!pip install -q kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json
!kaggle datasets download -d govindaramsriram/crop-yield-of-a-farm

!unzip /content/crop-yield-of-a-farm.zip

df = pd.read_csv('/content/crop_yield_data.csv')
df

"""# Exploratory Data Analysis (EDA)

## Analisis Deskriptif
"""

df.info()

df.describe()

df.isna().sum()

df.duplicated().sum()

"""## Univariate Analysis"""

df.hist(bins=30, figsize=(12, 10))
plt.tight_layout()
plt.show()

"""## Bivariate Analysis"""

import seaborn as sns
import matplotlib.pyplot as plt

features = ['rainfall_mm', 'soil_quality_index', 'farm_size_hectares', 'sunlight_hours', 'fertilizer_kg']

fig, axs = plt.subplots(2, 3, figsize=(15, 10))  # 2 baris, 3 kolom
axs = axs.flatten()  # Biar gampang dipanggil

for i, feature in enumerate(features):
    sns.scatterplot(x=df[feature], y=df['crop_yield'], ax=axs[i])
    axs[i].set_title(f'{feature} vs Crop Yield')
    axs[i].set_xlabel(feature)
    axs[i].set_ylabel('Crop Yield')

# Kosongkan sisa subplot kalau jumlah fitur ganjil
if len(features) < len(axs):
    for j in range(len(features), len(axs)):
        fig.delaxes(axs[j])

plt.tight_layout()
plt.show()

"""## Multivariate Analysis"""

# Heatmap korelasi semua variabel
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Matriks Korelasi')
plt.show()

# Korelasi fitur dengan crop_yield
correlations = df.corr()['crop_yield'].sort_values(ascending=False)
print("\nKorelasi fitur terhadap crop_yield:")
print(correlations)

"""# Data Preprocessing"""

X = df.drop(columns=['crop_yield'])
y = df['crop_yield']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Total seluruh sampel pada dataset: {len(X)}')
print(f'Total sampel train dataset: {len(X_train)}')
print(f'Total sampel in test dataset: {len(X_test)}')

# Buat scaler
scaler = StandardScaler()

# Fit di X_train lalu transform
X_train_scaled = scaler.fit_transform(X_train)

# Transform X_test pakai scaler yang sama
X_test_scaled = scaler.transform(X_test)

"""# Model Development"""

# Definisikan 5 pipeline model tanpa scaler
pipelines = {
    'Linear Regression': Pipeline([
        ('model', LinearRegression())
    ]),
    'Decision Tree': Pipeline([
        ('model', DecisionTreeRegressor(random_state=42))
    ]),
    'XGBoost': Pipeline([
        ('model', XGBRegressor(n_estimators=100, random_state=42, verbosity=0))
    ]),
    'Lasso Regression': Pipeline([
        ('model', Lasso(alpha=1.0, random_state=42))
    ]),
    'Ridge Regression': Pipeline([
        ('model', Ridge(alpha=1.0, random_state=42))
    ])
}

# Train dan evaluasi semua model
results = {}

for name, pipeline in pipelines.items():
    # Train
    pipeline.fit(X_train, y_train)

    # Predict Train
    y_train_pred = pipeline.predict(X_train)

    # Predict Test
    y_test_pred = pipeline.predict(X_test)

    # Evaluate
    train_mse = mean_squared_error(y_train, y_train_pred)
    train_r2 = r2_score(y_train, y_train_pred)

    test_mse = mean_squared_error(y_test, y_test_pred)
    test_r2 = r2_score(y_test, y_test_pred)

    results[name] = {
        'Train MSE': train_mse,
        'Train R2': train_r2,
        'Test MSE': test_mse,
        'Test R2': test_r2
    }

# Tampilkan hasil
results_df = pd.DataFrame(results).T
print(results_df)

# Reset index
results_df_reset = results_df.reset_index().rename(columns={'index': 'Model'})

# Pisahkan dataframe untuk MSE dan R2
mse_df = results_df_reset[['Model', 'Train MSE', 'Test MSE']]
r2_df = results_df_reset[['Model', 'Train R2', 'Test R2']]

# Melt masing-masing
mse_melted = mse_df.melt(id_vars='Model', var_name='Dataset', value_name='MSE')
r2_melted = r2_df.melt(id_vars='Model', var_name='Dataset', value_name='R2')

# Plot MSE
plt.figure(figsize=(14, 6))
sns.barplot(x='Model', y='MSE', hue='Dataset', data=mse_melted)
plt.title('Train vs Test MSE per Model')
plt.xticks(rotation=45)
plt.legend(title='Dataset', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Plot R²
plt.figure(figsize=(14, 6))
sns.barplot(x='Model', y='R2', hue='Dataset', data=r2_melted)
plt.title('Train vs Test R² per Model')
plt.xticks(rotation=45)
plt.legend(title='Dataset', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
